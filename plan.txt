Cub3D Implementation Plan (Without Bonuses)
===========================================

1. Project Setup
----------------
- Set up the development environment with the MLX42 library.
- Create the basic structure for the project (src, include, maps directories).
- Prepare the Makefile to compile the project.

2. Map Parsing
--------------
- Open .cub file.
- Get elements with get_next_line:
  - Skip empty lines.
  - For each line with info, check if it's valid and if we already have the element.
  - Remove newlines at the end of the string.
  - Store textures in cub3d->texture[0] - cub3d->texture[3].
  - Store floor color in cub3d->floor_color.
  - Store ceiling color in cub3d->ceiling_color.
- Read map:
  - Skip empty lines before the map.
  - Get the map with get_next_line.
  - Store every line of the map in a linked list.
  - Convert the linked list into an array of strings (easier to work with as a 2D grid).
  - Make every line as long as the longest and fill empty spaces with ' '.
- Check map validity:
  - Store the grid position of the player’s starting point.
  - Change the player’s starting point into '0'.
  - Check that every '0' isn't touching an empty space.
  - Use the flooding algorithm to check that the map consists of only one "island":
    - Start at the top-left corner of the map.
    - If it's '0' or '1', add by 2.
    - Check if there is still a '1' on the map.
    - Subtract 2 from them to get back to the initial map.
- Store the map data in a 2D array for easy access.

3. Player Setup
---------------
- Define the player’s initial position and direction based on the map.
- Create player movement functions to handle:
  - Forward/Backward (W/S keys).
  - Left/Right Strafe (A/D keys).
  - Rotation (Left/Right Arrow keys).

4. Raycasting Engine
--------------------
- Implement raycasting to simulate the 3D view:
  - Cast a ray for each vertical stripe of the screen.
  - Calculate distance to the closest wall.
  - Scale the wall height based on distance to simulate perspective.
- Ensure the rays detect walls properly, including textures.

5. Rendering
------------
- Use MLX42 to open a window and render the scene:
  - Draw the walls based on raycasting output.
  - Render a simple floor and ceiling.
- Add textures to the walls by mapping the texture coordinates to the distance of the ray hit.

6. Collision Detection
----------------------
- Prevent the player from walking through walls by implementing basic collision detection.
- Check the player’s movement against the 2D map grid before updating their position.

7. Input Handling
-----------------
- Capture and process keyboard input for movement (W/A/S/D) and rotation (Arrow keys).
- Implement the ESC key to exit the game cleanly.

8. Game Loop
------------
- Create the main game loop:
  - Handle input.
  - Update player position and direction.
  - Call the raycasting function to render the scene.
  - Update the display window in each frame.

9. Memory Management
--------------------
- Clean up memory allocations (if any).
- Ensure proper handling of errors and edge cases (invalid maps, window issues, etc.).

10. Testing
-----------
- Test the game with various .cub files to ensure it renders correctly.
- Verify that player movement and collision detection work properly.
- Check for memory leaks and ensure smooth performance.

===========================================

links

https://github.com/Saxsori/ray-cast?tab=readme-ov-file